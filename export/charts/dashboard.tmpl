<!DOCTYPE html>
<html>
<head>
    {{- $opt := .Options -}}
    {{- $seriesIdx := .SeriesIdx -}}
	<meta charset="UTF-8">
    {{- range $opt.JsSrc }}
    <script src="{{ . }}"></script>
    {{ end -}}
    <style>
        {{ $opt.StyleCSS }}
    </style>
    <script>
        function bytesFormatter(value, dataIndex) {
            if( value == null || (Array.isArray(value) && value.length == 0)) return null;
            if (value === 0) return '0 B';
            const k = 1024;
            const sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
            let i = Math.floor(Math.log(value) / Math.log(k));
            if( i < 0 || i >= sizes.length ) {
                i = 0;
            }
            return parseFloat((value / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }
        function durationFormatter(value, dataIndex) {
            if( value == null || (Array.isArray(value) && value.length == 0)) return null;
            if (value < 1e3) {
                return value.toFixed(2) + ' ns';
            } else if (value < 1e6) {
                return (value / 1e3).toFixed(2) + ' Âµs';
            } else if (value < 1e9) {
                return (value / 1e6).toFixed(2) + ' ms';
            } else {
                return (value / 1e9).toFixed(2) + ' s';
            }
        }
        function percentFormatter(value, dataIndex) {
            if( value == null || (Array.isArray(value) && value.length == 0)) return null;
            return value.toFixed(2) + ' %';
        }
        function shortFormatter(value, dataIndex) {
            if( value == null || (Array.isArray(value) && value.length == 0)) return null;
            // insert comma per thousands
            return value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        }
        function setFormatter(opt, meta) {
            let valueFormatter = null;
            switch(meta.unit) {
            case 'Bytes':
                valueFormatter = bytesFormatter;
                break;
            case 'Duration':
                valueFormatter = durationFormatter;
                break;
            case 'Percent':
                valueFormatter = percentFormatter;
                break;
            case 'Short':
                valueFormatter = shortFormatter;
                break;
            }
            opt.tooltip.valueFormatter = valueFormatter;
            if(opt.yAxis.axisLabel) {
                opt.yAxis.axisLabel.formatter = valueFormatter;
            } else {
                opt.yAxis.axisLabel = { formatter: valueFormatter };
            }
        }
    </script>
</head>
<body>
{{- if gt (len .Series) 0 -}}
    <div class="series-tabs">
        {{- range $i, $s := .Series }}
            {{- if $i }}, {{ end -}}
            <a href="{{$opt.BasePath}}?tsIdx={{$i}}"
               class="tab{{if eq $i $.SeriesIdx}} active{{end}}">{{$s}}</a>
        {{- end }}
    </div>
{{- end }}
<div class="container">
{{- range $n, $name := .MetricNames }}
	<div id="{{$name}}" class="item"></div>
	<script type="text/javascript">
	(() => {
		var chartDom = document.getElementById('{{$name}}');
		var myChart = echarts.init(chartDom, 'dark');
		var option = {};
		var initFetch = false;
		function fetchData() {
			fetch("{{$opt.BasePath}}?metric={{$name}}&tsIdx={{$seriesIdx}}")
				.then(response => response.json())
				.then(data => {
                    setFormatter(data.chartOption, data.meta);
					myChart.setOption(data.chartOption);
					if (!initFetch) {
						initFetch = true;
						if (data.interval < 1000) {
							data.interval = 1000;
						}
						setInterval(fetchData, data.interval);
					}
				});
		}
		fetchData();
    })();
	</script>
{{- end }}
</div>
</body>
</html>
