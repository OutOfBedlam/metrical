[data]
  sampling_interval = "1s"
  input_buffer = 100
  prefix = ""
  store = "./tmp/store/"
  [data.filter]
    includes = []
    excludes = []

  [[data.timeseries]]
    name = "15m"
    interval = "10s"
    length = 90

  [[data.timeseries]]
    name = "1h30m"
    interval = "1m0s"
    length = 90

  [[data.timeseries]]
    name = "2d"
    interval = "30m0s"
    length = 96

[http]
  listen = ":3000"
  adv_addr = "http://localhost:3000"
  dashboard = "/dashboard"

[[input.cpu]]
  ## collect per CPU stats, default false
  per_cpu = false


[[input.diskio]]
  ## Block devices to monitor, empty for all devices (default)
  ## e.g., devices = ["sd*", "vd*", "xvd*"]
  devices = ["*"]

  ## metrics of disk I/O stats to monitor, empty for all (default)
  ## Metric Names
  ##     diskio:<device>:<metric>
  ##
  ## Available metrics:
  ##
  ## read_bytes, write_bytes,
  ## read_time, write_time,
  ## read_merged, write_merged,
  ## read_ios, write_ios,
  ## io_in_progress,
  ## io_time, weighted_io_time
  ##
  # [input.diskio.filter]
    ## Include only these kinds of disk I/O stats, empty for all kinds (default)
    #includes = ["diskio:sda:read_*", "diskio:sda:write_*"]

    ## Exclude these kinds of disk I/O stats, empty for none (default)
    #excludes = ["diskio:*:*time"]


[[input.go_mem]]
  ## metrics of go runtime memory stats to monitor.
  ## Metric Names
  ##    go:mem:<metric>
  ##
  ## Available metrics:
  ##    heap_inuse


[[input.go_runtime]]
  ## metrics of go runtime stats to monitor.
  ## Metric Names
  ##    go:runtime:<metric>
  ##
  ## Available metrics:
  ##    goroutines
  

[[input.mem]]


#[[input.net]]
  ## Network interfaces to monitor, empty for all interfaces (default)
  interfaces = ["eth*", "en*"]

  ## Whether to report per-interface stats (true), or aggregate all interfaces (false, default)
  per_nic = false

  ## metrics of network traffics to monitor, empty for all (default)
  ## Metric Names
  ##     net:<interface>:<metric>
  ##   The total across all interfaces is reported with interface name "all"
  ##     net:all:<metric>
  ##
  ## Available metrics:
  ##
  ## bytes_sent, bytes_recv, packets_sent, packets_recv,
  ## err_in, err_out, drop_in, drop_out
  ## 
  [input.net.filter]
    ## Include only these kinds of network stats, empty for all kinds (default)
    includes = []  # ["net:*:bytes_*", "net:*:packets_*"]

    ## Exclude these kinds of network stats, empty for none (default)
    excludes = []  # ["net:*:*err_*", "net:*:*drop_*"]


#[[input.netstat]]

  ## metrics of netstat to monitor, empty for all (default)
  ## Metric Names
  ##     netstat:<metric>
  ##
  ## Available metrics:
  ##
  ## tcp_established, tcp_syn_sent, tcp_syn_recv, tcp_fin_wait1, tcp_fin_wait2,
  ## tcp_time_wait, tcp_close, tcp_close_wait, tcp_last_ack, tcp_listen,
  ## tcp_closing, tcp_none, udp_socket
  ##
  [input.netstat.filter]
    ## Include only these kinds of network stats, empty for all kinds (default)
    includes = []  # ["netstat:tcp_*", "netstat:udp_*"]
    ## Exclude these kinds of network stats, empty for none (default)
    excludes = []  # ["netstat:tcp_none"]

#[[output.ndjson]]
  ## Destination URL to send ndjson encoded data to
  # This should be an endpoint that accepts HTTP POST requests with a body
  # containing newline-delimited JSON objects.
  # The Content-Type header will be set to "application/x-ndjson".
  # The URL should respond with a 2xx status code on success.
  #
  # if empty, will print to stdout
  ## Example:
  # e.g. "http://127.0.0.1:5654/db/write/TAG"
  dest = ""

  ## List of metric name patterns to include in the output
  ## If empty, all metrics will be included
  ## Patterns can include wildcards, e.g. "cpu:cpu_*" to include all cpu metrics
  #[output.ndjson.filter]
  #  includes = []
  #  excludes = []

  ## Time format to use for the "time" value in the output JSON objects
  ## See https://pkg.go.dev/time#Time.Format for details on the format
  # e.g.
  # "s" for seconds since epoch
  # "ms" for milliseconds since epoch
  # "us" for microseconds since epoch
  # "ns" for nanoseconds since epoch
  # "2006-01-02 15:04:05" for a common datetime format
  # "2006-01-02T15:04:05Z07:00" for RFC3339 format
  timeformat = "ns"

  ## For odometer type metrics, how to select the value to report
  # "diff" for difference since last value
  # "no_negative_diff" for no negative difference, if the difference is negative, report 0
  # "abs_diff" for absolute difference, useful for values that may wrap around
  odometer_value_selector = "diff"

  ## For histogram type metrics, which percentile value to report
  # e.g. 
  # 0 to report the first percentile (minimum)
  # 0.95 for 95th percentile
  # 0.5 for median
  histogram_value_selector = 0

