[data]
  sampling_interval = "1s"
  input_buffer = 100
  prefix = ""
  store = "./tmp/store/"

  [[data.timeseries]]
    name = "15m"
    interval = "10s"
    length = 90

  [[data.timeseries]]
    name = "1h30m"
    interval = "1m0s"
    length = 90

  [[data.timeseries]]
    name = "2d"
    interval = "30m0s"
    length = 96

[http]
  listen = ":3000"
  adv_addr = "http://localhost:3000"
  dashboard = "/dashboard"

[[input.cpu]]
  ## metric type: gauge, meter
  type = "gauge"


[[input.go_mem_stats]]


[[input.go_runtime]]




[[input.mem]]
  ## metric type: gauge, meter
  type = "gauge"


#[[input.net]]
  ## Network interfaces to monitor, empty for all interfaces (default)
  # interfaces = ["eth*", "en*"]

  ## kinds of network stats to monitor, empty for all kinds (default)
  ## Available kinds:
  ##
  ## bytes_sent, bytes_recv,
  ## packets_sent, packets_recv,
  ## err_in, err_out
  ## drop_in, drop_out
  ##
  ## Include only these kinds of network stats, empty for all kinds (default)
  # includes = ["bytes_*", "packets_*"]

  ## Exclude these kinds of network stats, empty for none (default)
  # excludes = ["*_err*", "*_drop*"]

  ## Whether to report per-interface stats (true), or aggregate all interfaces (false, default)
  # per_nic = false

#[[input.netstat]]

  ## Fields available:
  ## tcp_established, tcp_syn_sent, tcp_syn_recv, tcp_fin_wait1, tcp_fin_wait2,
  ## tcp_time_wait, tcp_close, tcp_close_wait, tcp_last_ack, tcp_listen,
  ## tcp_closing, tcp_none, udp_socket

  ## Include only these kinds of network stats, empty for all kinds (default)
  # includes = ["tcp_*", "udp_*"]
     
  ## Exclude these kinds of network stats, empty for none (default)
  # excludes = ["tcp_none"]


[[output.ndjson]]
  ## Destination URL to send ndjson encoded data to
  # This should be an endpoint that accepts HTTP POST requests with a body
  # containing newline-delimited JSON objects.
  # if empty, will print to stdout
  ## Example:
  # e.g. "http://127.0.0.1:5654/db/write/TAG"
  dest = ""

  ## Time format to use for the "time" field in the output JSON objects
  ## See https://pkg.go.dev/time#Time.Format for details on the format
  # e.g.
  # "s" for seconds since epoch
  # "ms" for milliseconds since epoch
  # "us" for microseconds since epoch
  # "ns" for nanoseconds since epoch
  # "2006-01-02 15:04:05" for a common datetime format
  # "2006-01-02T15:04:05Z07:00" for RFC3339 format
  timeformat = "2006-01-02 15:04:05"

  ## For odometer type metrics, how to select the value to report
  # "diff" for difference since last value
  # "no_negative_diff" for no negative difference, if the difference is negative, report 0
  # "abs_diff" for absolute difference, useful for values that may wrap around
  odometer_value_selector = "diff"

  ## For histogram type metrics, which percentile value to report
  # e.g. 
  # 0.95 for 95th percentile
  # 0.5 for median (default)
  histogram_value_selector = 0.5

